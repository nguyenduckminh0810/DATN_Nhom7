// useLogin.js
import { ref, onMounted, computed } from 'vue'
import axios from 'axios'
import { useRouter } from 'vue-router'
import api from '@/utils/axios'
const status = ref('loggedOut')
const username = ref('')
const password = ref('')
const userId = ref('')
const token = ref('')
const message = ref('')

const initializeToken = () => {
  const savedToken = localStorage.getItem('token')
  const savedUserId = localStorage.getItem('userId')
  // ch·ªâ kh√¥i ph·ª•c username n·∫øu user ƒë√£ ch·ªçn ghi nh·ªõ
  const savedUsername = localStorage.getItem('rememberMe') === '1' ? localStorage.getItem('username') : null

  if (savedToken) {
    token.value = savedToken
    status.value = 'loggedIn'

    if (savedUserId) {
      userId.value = savedUserId
      console.log('userId restored from localStorage:', savedUserId)
    } else {
      getUserId()
    }

    if (savedUsername) {
      username.value = savedUsername
      console.log('username restored from localStorage:', savedUsername)
    }
  }
}

const isLoading = computed(() => status.value === 'loggingIn')

const resetForm = () => {
  username.value = ''
  password.value = ''
}

// G·ª≠i l√™n server ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
const getUserId = async () => {
  try {
    console.log('üì° Getting user ID with token:', token.value ? 'Token exists' : 'No token')
    const res = await api.get('/user', {
      headers: {
        Authorization: `Bearer ${token.value}`,
      },
    })
    console.log('‚úÖ User ID response:', res.data)
    console.log('‚úÖ User ID from response:', res.data.user_id)
    userId.value = res.data.user_id
    return res.data.user_id
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', err)
    console.error('‚ùå Error status:', err.response?.status)
    console.error('‚ùå Error data:', err.response?.data)
    return null
  }
}

const login = async () => {
  status.value = 'loggingIn'
  message.value = ''
  console.log('üöÄ Starting login process...')

  try {
    console.log('üì° Sending login request...')

    const res = await api.post('/login', {
      username: username.value,
      password: password.value,
    })

    console.log('üì• Login response:', res.data)
    const data = res.data

    if (data.status === 'SUCCESS') {
      const jwt = data.token || data.accessToken
      const user = data.user || {}

      message.value = data.message || '‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!'
      localStorage.setItem('username', user.username || username.value)

      localStorage.setItem('token', jwt)
      localStorage.setItem('user', JSON.stringify(user))
      token.value = jwt
      status.value = 'loggedIn'

      await getUserId().then((id) => {
        if (id) {
          localStorage.setItem('userId', id) // ‚úÖ l∆∞u userId
          console.log('‚úÖ Saved userId to localStorage:', id)
        } else {
          console.log('‚ùå Failed to get userId')
        }
      })
      
      // ‚úÖ RETURN USER DATA FOR REDIRECT LOGIC
      return { success: true, user }
    } else {
      message.value = data.message || '‚ùå C√≥ l·ªói x·∫£y ra!'
      status.value = 'loggedOut'
      resetForm()
      return { success: false }
    }
  } catch (err) {
    console.error('Login error:', err)

    if (err.response?.status === 429) {
      message.value = 'üö´ Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p! Vui l√≤ng th·ª≠ l·∫°i sau 1 ph√∫t.'
    } else if (err.response?.status === 401) {
      message.value = '‚ùå T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!'
    } else if (err.response?.status === 403) {
      message.value = 'üö´ T√†i kho·∫£n b·ªã kh√≥a ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!'
    } else if (err.code === 'NETWORK_ERROR') {
      message.value = 'üåê Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server! Vui l√≤ng ki·ªÉm tra internet.'
    } else {
      message.value = err.response?.data?.message || '‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.'
    }

    status.value = 'loggedOut'
    resetForm()
    return { success: false }
  }
}

const logout = () => {
  // ‚úÖ CLEAR AUTH DATA WITHOUT ROUTER
  const remembered = localStorage.getItem('rememberMe') === '1'
  const rememberedUsername = remembered ? localStorage.getItem('username') : null

  localStorage.removeItem('token')
  localStorage.removeItem('userId')
  localStorage.removeItem('user')
  localStorage.removeItem('admin_user') // ‚úÖ X√≥a c·∫£ admin_user n·∫øu c√≥

  // N·∫øu KH√îNG nh·ªõ ƒëƒÉng nh·∫≠p ‚Üí x√≥a username/rememberMe
  if (!remembered) {
    localStorage.removeItem('username')
    localStorage.removeItem('rememberMe')
    localStorage.removeItem('remembered_pw')
  } else if (rememberedUsername) {
    // ƒê·∫£m b·∫£o username v·∫´n c√≤n (ph√≤ng tr∆∞·ªùng h·ª£p n∆°i kh√°c x√≥a)
    localStorage.setItem('username', rememberedUsername)
    localStorage.setItem('rememberMe', '1')
  }

  // ‚úÖ Reset reactive values
  token.value = null
  userId.value = null
  username.value = remembered ? rememberedUsername : null
  status.value = 'loggedOut'
  message.value = ''
  resetForm()
  
  console.log('‚úÖ Logout completed - all auth data cleared')
}

export function useLogin() {
  // ‚úÖ INITIALIZE TOKEN WHEN COMPOSABLE IS USED
  initializeToken()

  return {
    status,
    username,
    password,
    token,
    userId,
    message,
    getUserId,
    isLoading,
    login,
    logout,
  }
}
