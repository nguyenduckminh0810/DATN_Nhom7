package com.nhom7.quiz.quizapp.service;

import com.nhom7.quiz.quizapp.model.QuizAttempt;
import com.nhom7.quiz.quizapp.model.Quiz;
import com.nhom7.quiz.quizapp.model.User;
import com.nhom7.quiz.quizapp.model.dto.QuizAttemptDTO;
import com.nhom7.quiz.quizapp.model.dto.QuizAttemptSummaryDTO;
import java.util.List;
import java.util.stream.Collectors;
import java.time.LocalDateTime;
import com.nhom7.quiz.quizapp.repository.QuizAttemptRepo;
import com.nhom7.quiz.quizapp.repository.QuizRepo;
import com.nhom7.quiz.quizapp.repository.UserRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

@Service
public class QuizAttemptService {

    @Autowired
    private QuizAttemptRepo quizAttemptRepo;
    
    @Autowired
    private UserRepo userRepo;
    
    @Autowired
    private QuizRepo quizRepo;

    /**
     * T√¨m l·ªãch s·ª≠ l√†m quiz v·ªõi ph√¢n quy·ªÅn
     * 
     * @param userId - null n·∫øu mu·ªën xem t·∫•t c·∫£ (ch·ªâ admin)
     * @param quizId - null n·∫øu kh√¥ng l·ªçc theo quiz
     * @param page   - trang hi·ªán t·∫°i (b·∫Øt ƒë·∫ßu t·ª´ 0)
     * @param size   - s·ªë l∆∞·ª£ng item tr√™n m·ªói trang
     * @return Page<QuizAttemptDTO>
     */
    public Page<QuizAttemptDTO> findQuizAttempts(Long userId, Long quizId, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<QuizAttempt> attempts;

        System.out.println("üîç QuizAttemptService.findQuizAttempts:");
        System.out.println("  üìã Params - userId: " + userId + ", quizId: " + quizId + ", page: " + page + ", size: " + size);

        if (userId != null && quizId != null) {
            // L·ªçc theo c·∫£ user v√† quiz
            System.out.println("  üîç Query: findByUserIdAndQuizId(" + userId + ", " + quizId + ")");
            attempts = quizAttemptRepo.findByUserIdAndQuizId(userId, quizId, pageable);
        } else if (userId != null) {
            // Ch·ªâ l·ªçc theo user
            System.out.println("  üîç Query: findByUserIdOrderByAttemptedAtDesc(" + userId + ")");
            attempts = quizAttemptRepo.findByUserIdOrderByAttemptedAtDesc(userId, pageable);
        } else if (quizId != null) {
            // Ch·ªâ l·ªçc theo quiz
            System.out.println("  üîç Query: findByQuizId(" + quizId + ")");
            attempts = quizAttemptRepo.findByQuizId(quizId, pageable);
        } else {
            // Xem t·∫•t c·∫£ (ch·ªâ admin)
            System.out.println("  üîç Query: findAllOrderByAttemptedAtDesc()");
            attempts = quizAttemptRepo.findAllOrderByAttemptedAtDesc(pageable);
        }

        System.out.println("  üìä Raw query result: " + attempts.getTotalElements() + " total elements, " + attempts.getContent().size() + " in current page");
        
        Page<QuizAttemptDTO> result = attempts.map(this::convertToDTO);
        System.out.println("  ‚úÖ Converted to DTO: " + result.getTotalElements() + " total elements");
        
        return result;
    }

    /**
     * B·∫Øt ƒë·∫ßu attempt m·ªõi (tr·∫£ v·ªÅ attemptId). Cho ph√©p userId null ƒë·ªëi v·ªõi public practice
     */
     public Long startAttempt(Long quizId, Long userId) {
        Quiz quiz = quizRepo.findById(quizId).orElseThrow(() -> new IllegalArgumentException("Quiz not found"));
        QuizAttempt attempt = new QuizAttempt();
        attempt.setQuiz(quiz);
        if (userId != null) {
            User user = userRepo.findById(userId).orElse(null);
            attempt.setUser(user);
        } else {
            // V·ªõi public/anonymous, c√≥ th·ªÉ g√°n user null n·∫øu schema cho ph√©p.
            // Trong DB hi·ªán t·∫°i user_id nullable=false, n√™n t·∫°m th·ªùi g√°n user ƒë·∫ßu ti√™n ho·∫∑c n√©m l·ªói.
            // ƒê·ªÉ an to√†n: y√™u c·∫ßu ƒëƒÉng nh·∫≠p ho·∫∑c t·∫°o user guest. ·ªû ƒë√¢y n√©m l·ªói r√µ r√†ng.
            throw new IllegalArgumentException("Public startAttempt y√™u c·∫ßu ƒëƒÉng nh·∫≠p trong schema hi·ªán t·∫°i");
        }
        attempt.setScore(0);
         attempt.setAttemptedAt(LocalDateTime.now());
        attempt.setTimeTaken(0);
         attempt.setStatus(com.nhom7.quiz.quizapp.model.AttemptStatus.IN_PROGRESS);
        QuizAttempt saved = quizAttemptRepo.save(attempt);
        return saved.getId();
    }

    /**
     * Tr·∫£ v·ªÅ tr·∫°ng th√°i attempt
     */
     public String getAttemptStatus(Long attemptId) {
         return quizAttemptRepo.findById(attemptId).map(a -> a.getStatus().name()).orElse(null);
    }

    /**
     * Chuy·ªÉn ƒë·ªïi QuizAttempt th√†nh QuizAttemptDTO
     */
    private QuizAttemptDTO convertToDTO(QuizAttempt attempt) {
        return new QuizAttemptDTO(
                attempt.getId(),
                attempt.getUser().getUsername(),
                attempt.getQuiz().getTitle(),
                attempt.getScore(),
                attempt.getAttemptedAt(),
                attempt.getTimeTaken());
    }

    /**
     * L∆∞u quiz attempt m·ªõi
     */
    public QuizAttempt saveQuizAttempt(QuizAttempt quizAttempt) {
        return quizAttemptRepo.save(quizAttempt);
    }

    /**
     * T√¨m quiz attempt theo ID
     */
    public QuizAttempt findById(Long id) {
        return quizAttemptRepo.findById(id).orElse(null);
    }

    /**
     * L·∫•y recent attempts cho m·ªôt quiz c·ª• th·ªÉ
     */
    public List<QuizAttemptSummaryDTO> getRecentAttemptsForQuiz(Long quizId) {
        List<QuizAttempt> attempts = quizAttemptRepo.findByQuizIdOrderByAttemptedAtDesc(quizId);

        return attempts.stream()
                .limit(5) // Ch·ªâ l·∫•y 5 attempts g·∫ßn nh·∫•t
                .map(this::convertToSummaryDTO)
                .collect(Collectors.toList());
    }

    /**
     * Chuy·ªÉn ƒë·ªïi QuizAttempt th√†nh QuizAttemptSummaryDTO
     */
    private QuizAttemptSummaryDTO convertToSummaryDTO(QuizAttempt attempt) {
        return new QuizAttemptSummaryDTO(
                attempt.getId(),
                attempt.getUser().getFullName() != null ? attempt.getUser().getFullName()
                        : attempt.getUser().getUsername(),
                attempt.getScore(),
                attempt.getTimeTaken(),
                attempt.getAttemptedAt());
    }

    /**
     * ƒê·∫øm t·ªïng s·ªë quiz attempts trong database (ƒë·ªÉ debug)
     */
    public long getTotalCount() {
        long count = quizAttemptRepo.count();
        System.out.println("üîç QuizAttemptService.getTotalCount(): " + count);
        return count;
    }

    /**
     * T·∫°o sample data cho quiz attempts (ƒë·ªÉ debug)
     */
    public String createSampleData() {
        try {
            System.out.println("üîß Creating sample quiz attempt data...");
            
            // L·∫•y users v√† quizzes c√≥ s·∫µn
            List<User> users = userRepo.findAll();
            List<Quiz> quizzes = quizRepo.findAll();
            
            if (users.isEmpty()) {
                return "‚ùå No users found in database. Cannot create sample data.";
            }
            
            if (quizzes.isEmpty()) {
                return "‚ùå No quizzes found in database. Cannot create sample data.";
            }
            
            System.out.println("üìä Found " + users.size() + " users and " + quizzes.size() + " quizzes");
            
            int createdCount = 0;
            
            // T·∫°o sample attempts cho t·ª´ng user v·ªõi t·ª´ng quiz
            for (User user : users) {
                for (int i = 0; i < Math.min(3, quizzes.size()); i++) { // T·ªëi ƒëa 3 attempts per user
                    Quiz quiz = quizzes.get(i);
                    
                    QuizAttempt attempt = new QuizAttempt();
                    attempt.setUser(user);
                    attempt.setQuiz(quiz);
                    attempt.setScore(60 + (int)(Math.random() * 40)); // Score t·ª´ 60-100
                    attempt.setTimeTaken(120 + (int)(Math.random() * 300)); // 2-7 ph√∫t
                    attempt.setAttemptedAt(LocalDateTime.now().minusDays((int)(Math.random() * 30))); // Trong 30 ng√†y qua
                    
                    quizAttemptRepo.save(attempt);
                    createdCount++;
                    
                    System.out.println("‚úÖ Created attempt: User " + user.getUsername() + 
                                     " -> Quiz " + quiz.getTitle() + " (Score: " + attempt.getScore() + ")");
                }
            }
            
            return "‚úÖ Successfully created " + createdCount + " sample quiz attempts!";
            
        } catch (Exception e) {
            System.err.println("‚ùå Error creating sample data: " + e.getMessage());
            e.printStackTrace();
            return "‚ùå Error: " + e.getMessage();
        }
    }
}