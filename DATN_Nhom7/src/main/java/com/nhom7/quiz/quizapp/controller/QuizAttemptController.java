package com.nhom7.quiz.quizapp.controller;

import com.nhom7.quiz.quizapp.model.User;
import com.nhom7.quiz.quizapp.model.QuizAttempt;
import com.nhom7.quiz.quizapp.model.dto.QuizAttemptDTO;
import com.nhom7.quiz.quizapp.model.dto.QuizAttemptSummaryDTO;
import com.nhom7.quiz.quizapp.model.dto.SubmitAttemptRequest;
import java.util.List;
import com.nhom7.quiz.quizapp.service.QuizAttemptService;
import com.nhom7.quiz.quizapp.service.userService.LoginService;
import com.nhom7.quiz.quizapp.service.QuestionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import java.util.Map;
import java.util.HashMap;
import com.nhom7.quiz.quizapp.repository.QuizRepo;

@RestController
@RequestMapping("/api/quiz-attempts")
@CrossOrigin(origins = "*")
public class QuizAttemptController {

    @Autowired
    private QuizAttemptService quizAttemptService;

    @Autowired
    private com.nhom7.quiz.quizapp.service.ResultService resultService;

    @Autowired
    private LoginService loginService;

    @Autowired
    private QuestionService questionService;

    @Autowired
    private QuizRepo quizRepo;

    /**
     * B·∫Øt ƒë·∫ßu m·ªôt attempt m·ªõi (public/practice c≈©ng h·ªó tr·ª£)
     * POST /api/quiz-attempts/start?quizId=123
     */
    @PostMapping("/start")
    public ResponseEntity<?> startAttempt(@RequestParam Long quizId) {
        try {
            System.out.println("üîç QuizAttemptController.startAttempt() - Quiz ID: " + quizId);
            
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            System.out.println("üîç Authentication: " + authentication);
            System.out.println("üîç Authentication name: " + (authentication != null ? authentication.getName() : "null"));
            System.out.println("üîç Is authenticated: " + (authentication != null ? authentication.isAuthenticated() : "null"));
            
            User currentUser = null;
            if (authentication != null && authentication.isAuthenticated()
                    && authentication.getName() != null && !"anonymousUser".equals(authentication.getName())) {
                currentUser = loginService.findByUsername(authentication.getName());
                System.out.println("üîç Current user: " + (currentUser != null ? currentUser.getId() + " - " + currentUser.getUsername() : "null"));
            }
            
            Long userId = currentUser != null ? currentUser.getId() : null;
            System.out.println("üîç User ID: " + userId);
            
            Long attemptId = quizAttemptService.startAttempt(quizId, userId);
            System.out.println("üîç Created attempt ID: " + attemptId);
            
            if (attemptId == null) {
                System.err.println("‚ùå Failed to create attempt");
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                        .body(java.util.Map.of("error", "Failed to create attempt"));
            }
            
            System.out.println("‚úÖ Successfully created attempt: " + attemptId);
            return ResponseEntity.ok(java.util.Map.of("attemptId", attemptId, "status", "IN_PROGRESS"));
        } catch (Exception e) {
            System.err.println("‚ùå Error in startAttempt: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(java.util.Map.of("error", e.getMessage()));
        }
    }

    /**
     * L·∫•y tr·∫°ng th√°i attempt
     * GET /api/quiz-attempts/{attemptId}/status
     */
    @GetMapping("/{attemptId}/status")
    public ResponseEntity<?> getAttemptStatus(@PathVariable Long attemptId) {
        try {
            System.out.println("üîç QuizAttemptController.getAttemptStatus() - Attempt ID: " + attemptId);
            
            String status = quizAttemptService.getAttemptStatus(attemptId);
            System.out.println("üîç Attempt status from service: " + status);
            
            if (status == null) {
                System.err.println("‚ùå Attempt not found or status is null");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
            }
            
            System.out.println("‚úÖ Returning status: " + status);
            return ResponseEntity.ok(java.util.Map.of("status", status));
        } catch (Exception e) {
            System.err.println("‚ùå Error in getAttemptStatus: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(java.util.Map.of("error", e.getMessage()));
        }
    }

    /**
     * L·∫•y c√¢u h·ªèi theo attemptId (ƒë·ªÉ ch∆°i theo attempt)
     * GET /api/quiz-attempts/{attemptId}/questions
     */
    @GetMapping("/{attemptId}/questions")
    public ResponseEntity<?> getAttemptQuestions(@PathVariable Long attemptId) {
        QuizAttempt attempt = quizAttemptService.findById(attemptId);
        if (attempt == null)
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();

        // Ki·ªÉm tra quy·ªÅn: user hi·ªán t·∫°i ph·∫£i l√† ch·ªß s·ªü h·ªØu ho·∫∑c admin
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || authentication.getName() == null
                || "anonymousUser".equals(authentication.getName())) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        User currentUser = loginService.findByUsername(authentication.getName());
        boolean isAdmin = currentUser != null && currentUser.getRole() != null
                && ("ADMIN".equalsIgnoreCase(currentUser.getRole()) || "admin".equalsIgnoreCase(currentUser.getRole()));
        if (!isAdmin && (attempt.getUser() == null || !attempt.getUser().getId().equals(currentUser.getId()))) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }

        Long quizId = attempt.getQuiz().getId();
        String quizTitle = attempt.getQuiz().getTitle();
        java.util.List<com.nhom7.quiz.quizapp.model.Question> questions = questionService.getQuestionsByQuizId(quizId);
        java.util.Map<String, Object> resp = new java.util.HashMap<>();
        resp.put("quizId", quizId);
        resp.put("quizTitle", quizTitle);
        resp.put("questions", questions);
        return ResponseEntity.ok(resp);
    }

    /**
     * N·ªôp b√†i theo attemptId
     * POST /api/quiz-attempts/{attemptId}/submit
     */
    @PostMapping("/{attemptId}/submit")
    public ResponseEntity<?> submitAttempt(@PathVariable Long attemptId, @RequestBody SubmitAttemptRequest body) {
        try {
            // T√°i s·ª≠ d·ª•ng ResultService evaluateAndSave hi·ªán c√≥ theo quizId/userId
            // L·∫•y attempt -> t·ª´ ƒë√≥ l·∫•y quizId, userId
            QuizAttempt attempt = quizAttemptService.findById(attemptId);
            if (attempt == null)
                return ResponseEntity.status(HttpStatus.NOT_FOUND).build();

            // V√¨ kh√¥ng c√≥ status field, lu√¥n cho ph√©p submit
            // if (attempt.getStatus() != AttemptStatus.IN_PROGRESS) {
            // return ResponseEntity.status(HttpStatus.BAD_REQUEST)
            // .body(java.util.Map.of("error", "Attempt not in progress"));
            // }

            // Build QuizSubmissionDTO t·ª´ attempt
            com.nhom7.quiz.quizapp.model.dto.QuizSubmissionDTO dto = new com.nhom7.quiz.quizapp.model.dto.QuizSubmissionDTO();
            dto.setQuizId(attempt.getQuiz().getId());
            dto.setUserId(attempt.getUser().getId());
            dto.setAnswers(body.getAnswers());
            dto.setTimeTaken(body.getTimeTaken());

            com.nhom7.quiz.quizapp.model.dto.EvaluationResult eval = resultService.evaluateAndSave(dto);

            // C·∫≠p nh·∫≠t attempt v·ªõi ƒëi·ªÉm s·ªë/time ƒë√£ ch·∫•m ƒë·ªÉ l·ªãch s·ª≠ hi·ªÉn th·ªã ƒë√∫ng
            attempt.setAttemptedAt(java.time.LocalDateTime.now());
            try {
                attempt.setScore(eval.getScore());
            } catch (Exception ignore) {}
            try {
                if (body.getTimeTaken() != null) {
                    attempt.setTimeTaken(body.getTimeTaken());
                }
            } catch (Exception ignore) {}
            quizAttemptService.saveQuizAttempt(attempt);

            return ResponseEntity.ok(java.util.Map.of("resultId", eval.getResultId(), "score", eval.getScore()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(java.util.Map.of("error", e.getMessage()));
        }
    }

    /**
     * API l·∫•y l·ªãch s·ª≠ l√†m quiz - CH·ªà L·∫§Y ƒê√É HO√ÄN TH√ÄNH - d√πng chung cho admin v√† user
     * GET /api/quiz-attempts?userId={userId}&quizId={quizId}&page={page}&size={size}
     * User th∆∞·ªùng ch·ªâ xem ƒë∆∞·ª£c l·ªãch s·ª≠ ƒë√£ ho√†n th√†nh c·ªßa m√¨nh
     * Admin c√≥ th·ªÉ xem l·ªãch s·ª≠ ƒë√£ ho√†n th√†nh c·ªßa t·∫•t c·∫£ user
     */
    @GetMapping
    public ResponseEntity<Page<QuizAttemptDTO>> getQuizAttempts(
            @RequestParam(required = false) Long userId,
            @RequestParam(required = false) Long quizId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {

        // L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ token
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String currentUsername = authentication.getName();
        User currentUser = loginService.findByUsername(currentUsername);

        System.out.println("üîç QuizAttempt Request:");
        System.out.println("  üìã Current user: " + currentUsername + " (ID: " + currentUser.getId() + ", Role: "
                + currentUser.getRole() + ")");
        System.out.println("  üìã Request params - userId: " + userId + ", quizId: " + quizId + ", page: " + page
                + ", size: " + size);

        // Ph√¢n quy·ªÅn: User th∆∞·ªùng ch·ªâ xem ƒë∆∞·ª£c l·ªãch s·ª≠ c·ªßa ch√≠nh m√¨nh
        // Fix: Handle both "admin" and "ADMIN" role formats
        String userRole = currentUser.getRole();
        boolean isAdmin = "ADMIN".equalsIgnoreCase(userRole) || "admin".equalsIgnoreCase(userRole);

        if (!isAdmin) {
            userId = currentUser.getId(); // Ghi ƒë√® userId b·∫±ng ID c·ªßa user hi·ªán t·∫°i
            System.out.println("  üîí Non-admin user, filtering to own attempts only (userId: " + userId + ")");
        } else {
            System.out.println("  üëë Admin user, can view all attempts (role: " + userRole + ")");
        }

        // G·ªçi service ƒë·ªÉ l·∫•y d·ªØ li·ªáu
        Page<QuizAttemptDTO> attempts = quizAttemptService.findQuizAttempts(userId, quizId, page, size);

        System.out.println("  üìä Query result: " + attempts.getTotalElements() + " total attempts, "
                + attempts.getContent().size() + " in current page");

        return ResponseEntity.ok(attempts);
    }

    /**
     * API l·∫•y l·ªãch s·ª≠ l√†m quiz c·ªßa user hi·ªán t·∫°i (d√†nh cho user th∆∞·ªùng) - CH·ªà L·∫§Y ƒê√É HO√ÄN TH√ÄNH
     * GET /api/quiz-attempts/my-history
     */
    @GetMapping("/my-history")
    public ResponseEntity<Page<QuizAttemptDTO>> getMyQuizHistory(
            @RequestParam(required = false) Long quizId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {

        // L·∫•y th√¥ng tin user hi·ªán t·∫°i
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String currentUsername = authentication.getName();
        User currentUser = loginService.findByUsername(currentUsername);

        // Ch·ªâ l·∫•y l·ªãch s·ª≠ ƒê√É HO√ÄN TH√ÄNH c·ªßa user hi·ªán t·∫°i
        Page<QuizAttemptDTO> attempts = quizAttemptService.findQuizAttempts(currentUser.getId(), quizId, page, size);

        return ResponseEntity.ok(attempts);
    }

    /**
     * API admin ƒë·ªÉ xem T·∫§T C·∫¢ attempts (bao g·ªìm IN_PROGRESS) - CH·ªà ADMIN
     * GET /api/quiz-attempts/admin/all
     */
    @GetMapping("/admin/all")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Page<QuizAttemptDTO>> getAllAttemptsForAdmin(
            @RequestParam(required = false) Long userId,
            @RequestParam(required = false) Long quizId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {

        System.out.println("üîç Admin request for ALL attempts (including IN_PROGRESS):");
        System.out.println("  üìã Params - userId: " + userId + ", quizId: " + quizId + ", page: " + page + ", size: " + size);

        // Admin c√≥ th·ªÉ xem T·∫§T C·∫¢ attempts (bao g·ªìm IN_PROGRESS)
        Page<QuizAttemptDTO> attempts = quizAttemptService.findAllQuizAttempts(userId, quizId, page, size);

        System.out.println("  üìä Admin query result: " + attempts.getTotalElements() + " total attempts, "
                + attempts.getContent().size() + " in current page");

        return ResponseEntity.ok(attempts);
    }

    /**
     * Test endpoint ƒë·ªÉ ki·ªÉm tra public access
     * GET /api/quiz-attempts/public/test
     */
    @GetMapping("/public/test")
    public ResponseEntity<String> testPublicEndpoint() {
        System.out.println("‚úÖ Test public endpoint accessed successfully!");
        return ResponseEntity.ok("Public endpoint works!");
    }

    /**
     * Debug endpoint ƒë·ªÉ ki·ªÉm tra database
     * GET /api/quiz-attempts/debug/count
     */
    @GetMapping("/debug/count")
    public ResponseEntity<String> debugDatabaseCount() {
        try {
            long totalCount = quizAttemptService.getTotalCount();
            System.out.println("üîç Total quiz attempts in database: " + totalCount);
            return ResponseEntity.ok("Total quiz attempts in database: " + totalCount);
        } catch (Exception e) {
            System.err.println("‚ùå Error checking database: " + e.getMessage());
            return ResponseEntity.ok("Error checking database: " + e.getMessage());
        }
    }

    /**
     * Debug endpoint ƒë·ªÉ ki·ªÉm tra quiz attempts cho quiz c·ª• th·ªÉ
     * GET /api/quiz-attempts/debug/quiz/{quizId}
     */
    @GetMapping("/debug/quiz/{quizId}")
    public ResponseEntity<Map<String, Object>> debugQuizAttempts(@PathVariable Long quizId) {
        System.out.println("üîç Debug: Checking quiz attempts for quiz ID: " + quizId);
        Map<String, Object> response = new HashMap<>();

        try {
            // Ki·ªÉm tra database
            long totalAttempts = quizAttemptService.getTotalCount();
            response.put("totalAttempts", totalAttempts);

            // Ki·ªÉm tra quiz c√≥ t·ªìn t·∫°i kh√¥ng
            boolean quizExists = quizRepo.existsById(quizId);
            response.put("quizExists", quizExists);

            if (quizExists) {
                // L·∫•y attempts cho quiz c·ª• th·ªÉ
                List<QuizAttemptSummaryDTO> attempts = quizAttemptService.getRecentAttemptsForQuiz(quizId);
                response.put("attemptsCount", attempts.size());
                response.put("attempts", attempts);
            }

            response.put("status", "success");
            response.put("message", "Debug completed successfully");

            System.out.println("‚úÖ Debug completed: " + response);
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            System.err.println("‚ùå Debug failed: " + e.getMessage());
            e.printStackTrace();

            response.put("status", "error");
            response.put("message", e.getMessage());
            response.put("errorType", e.getClass().getSimpleName());

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * Debug endpoint ƒë·ªÉ t·∫°o sample data
     * POST /api/quiz-attempts/debug/create-sample
     */
    @PostMapping("/debug/create-sample")
    public ResponseEntity<String> createSampleData() {
        try {
            String result = quizAttemptService.createSampleData();
            System.out.println("‚úÖ Sample data creation result: " + result);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            System.err.println("‚ùå Error creating sample data: " + e.getMessage());
            return ResponseEntity.ok("Error creating sample data: " + e.getMessage());
        }
    }

    /**
     * API l·∫•y recent attempts cho m·ªôt quiz c·ª• th·ªÉ (Public endpoint - final)
     * GET /api/quiz-attempts/public/recent/{quizId}
     */
    @GetMapping("/public/recent/{quizId}")
    public ResponseEntity<List<QuizAttemptSummaryDTO>> getPublicRecentAttemptsFinal(@PathVariable Long quizId) {
        System.out.println("üîç Requesting PUBLIC recent attempts (final) for quiz ID: " + quizId);
        try {
            // ‚úÖ VALIDATE QUIZ ID
            if (quizId == null || quizId <= 0) {
                System.err.println("‚ùå Invalid quiz ID: " + quizId);
                return ResponseEntity.badRequest().build();
            }

            // ‚úÖ DEBUG: Ki·ªÉm tra database tr∆∞·ªõc
            long totalAttempts = quizAttemptService.getTotalCount();
            System.out.println("üîç Total quiz attempts in database: " + totalAttempts);

            List<QuizAttemptSummaryDTO> recentAttempts = quizAttemptService.getRecentAttemptsForQuiz(quizId);
            System.out.println("‚úÖ Found " + recentAttempts.size() + " recent attempts for quiz " + quizId);

            // ‚úÖ Tr·∫£ v·ªÅ empty list n·∫øu kh√¥ng c√≥ attempts (kh√¥ng ph·∫£i l·ªói)
            return ResponseEntity.ok(recentAttempts);
        } catch (Exception e) {
            System.err.println("‚ùå Error getting recent attempts for quiz " + quizId + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * Test endpoint ƒë·ªÉ ki·ªÉm tra quiz attempts API
     * GET /api/quiz-attempts/test/quiz/{quizId}
     */
    @GetMapping("/test/quiz/{quizId}")
    public ResponseEntity<Map<String, Object>> testQuizAttempts(@PathVariable Long quizId) {
        System.out.println("üß™ Testing quiz attempts for quiz ID: " + quizId);
        Map<String, Object> response = new HashMap<>();

        try {
            // Ki·ªÉm tra database
            long totalAttempts = quizAttemptService.getTotalCount();
            response.put("totalAttempts", totalAttempts);

            // Ki·ªÉm tra quiz c√≥ t·ªìn t·∫°i kh√¥ng
            boolean quizExists = quizRepo.existsById(quizId);
            response.put("quizExists", quizExists);

            // L·∫•y attempts cho quiz c·ª• th·ªÉ
            List<QuizAttemptSummaryDTO> attempts = quizAttemptService.getRecentAttemptsForQuiz(quizId);
            response.put("attemptsCount", attempts.size());
            response.put("attempts", attempts);

            response.put("status", "success");
            response.put("message", "Test completed successfully");

            System.out.println("‚úÖ Test completed: " + response);
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            System.err.println("‚ùå Test failed: " + e.getMessage());
            e.printStackTrace();

            response.put("status", "error");
            response.put("message", e.getMessage());
            response.put("errorType", e.getClass().getSimpleName());

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
}