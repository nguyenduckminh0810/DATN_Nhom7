package com.nhom7.quiz.quizapp.service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.nhom7.quiz.quizapp.model.Quiz;
import com.nhom7.quiz.quizapp.model.Report;
import com.nhom7.quiz.quizapp.model.User;
import com.nhom7.quiz.quizapp.repository.QuizRepo;
import com.nhom7.quiz.quizapp.repository.ReportRepo;
import com.nhom7.quiz.quizapp.repository.UserRepo;

@Service
public class ReportService {

    @Autowired
    private ReportRepo reportRepo;

    @Autowired
    private QuizRepo quizRepo;

    @Autowired
    private UserRepo userRepo;

    // T·∫°o b√°o c√°o quiz m·ªõi
    public Report createQuizReport(Long userId, Long quizId, String reason) {
        // Ki·ªÉm tra user t·ªìn t·∫°i
        Optional<User> userOpt = userRepo.findById(userId);
        if (userOpt.isEmpty()) {
            throw new IllegalArgumentException("User kh√¥ng t·ªìn t·∫°i!");
        }

        // Ki·ªÉm tra quiz t·ªìn t·∫°i
        Optional<Quiz> quizOpt = quizRepo.findById(quizId);
        if (quizOpt.isEmpty()) {
            throw new IllegalArgumentException("Quiz kh√¥ng t·ªìn t·∫°i!");
        }

        // Ki·ªÉm tra user ƒë√£ b√°o c√°o quiz n√†y ch∆∞a
        List<Report> existingReports = reportRepo.findByQuizIdAndUserId(quizId, userId);
        if (!existingReports.isEmpty()) {
            throw new IllegalArgumentException("B·∫°n ƒë√£ b√°o c√°o quiz n√†y r·ªìi!");
        }

        // T·∫°o b√°o c√°o m·ªõi
        Report report = new Report();
        report.setUser(userOpt.get());
        report.setQuiz(quizOpt.get());
        report.setComment(null);
        report.setReason(reason);
        report.setStatus("PENDING");
        report.setCreatedAt(LocalDateTime.now());
        Quiz quiz = quizOpt.get();

        report.setReportedUser(quiz.getUser());

        return reportRepo.save(report);
    }

    // L·∫•y t·∫•t c·∫£ b√°o c√°o v·ªõi ph√¢n trang
    public Page<Report> getAllReports(int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        return reportRepo.findAll(pageable);
    }

    public Page<Report> getReportsByStatus(String status, int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        return reportRepo.findByStatus(status, pageable);
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i b√°o c√°o
    public Report updateReportStatus(Long reportId, String newStatus) {
        Optional<Report> reportOpt = reportRepo.findById(reportId);
        if (reportOpt.isEmpty()) {
            throw new IllegalArgumentException("B√°o c√°o kh√¥ng t·ªìn t·∫°i!");
        }

        // Validate status
        if (!isValidStatus(newStatus)) {
            throw new IllegalArgumentException("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: PENDING, RESOLVED, REJECTED");
        }

        Report report = reportOpt.get();
        String oldStatus = report.getStatus();
        report.setStatus(newStatus);

        // X·ª≠ l√Ω quiz khi b√°o c√°o ƒë∆∞·ª£c ph√™ duy·ªát
        if ("RESOLVED".equals(newStatus) && !"RESOLVED".equals(oldStatus)) {
            Quiz reportedQuiz = report.getQuiz();
            if (reportedQuiz != null) {
                reportedQuiz.setPublic(false);
                quizRepo.save(reportedQuiz);

                System.out.println("üîí Quiz ID " + reportedQuiz.getId() + " ƒë√£ ƒë∆∞·ª£c ·∫©n do b√°o c√°o ƒë∆∞·ª£c ph√™ duy·ªát");
            }
        }

        return reportRepo.save(report);
    }

    // L·∫•y b√°o c√°o theo ID
    public Optional<Report> getReportById(Long id) {
        return reportRepo.findById(id);
    }

    public List<Report> getReportsByUserId(Long userId) {
        return reportRepo.findByUser_Id(userId);
    }

    // L·∫•y b√°o c√°o c·ªßa quiz
    public List<Report> getReportsByQuizId(Long quizId) {
        return reportRepo.findByQuiz_Id(quizId);
    }

    // Th·ªëng k√™ b√°o c√°o
    public Map<String, Object> getReportStats() {
        Map<String, Object> stats = new HashMap<>();

        // T·ªïng s·ªë b√°o c√°o
        long totalReports = reportRepo.count();
        stats.put("totalReports", totalReports);

        // S·ªë b√°o c√°o theo tr·∫°ng th√°i
        long pendingReports = reportRepo.countByStatus("PENDING");
        long resolvedReports = reportRepo.countByStatus("RESOLVED");
        long rejectedReports = reportRepo.countByStatus("REJECTED");

        stats.put("pendingReports", pendingReports);
        stats.put("resolvedReports", resolvedReports);
        stats.put("rejectedReports", rejectedReports);

        // Ph·∫ßn trƒÉm
        if (totalReports > 0) {
            stats.put("pendingPercentage", Math.round((pendingReports * 100.0) / totalReports * 10.0) / 10.0);
            stats.put("resolvedPercentage", Math.round((resolvedReports * 100.0) / totalReports * 10.0) / 10.0);
            stats.put("rejectedPercentage", Math.round((rejectedReports * 100.0) / totalReports * 10.0) / 10.0);
        } else {
            stats.put("pendingPercentage", 0.0);
            stats.put("resolvedPercentage", 0.0);
            stats.put("rejectedPercentage", 0.0);
        }

        return stats;
    }

    // X√≥a b√°o c√°o
    public boolean deleteReport(Long reportId) {
        if (reportRepo.existsById(reportId)) {
            reportRepo.deleteById(reportId);
            return true;
        }
        return false;
    }

    // Ki·ªÉm tra user ƒë√£ b√°o c√°o quiz n√†y ch∆∞a
    public boolean hasUserReportedQuiz(Long userId, Long quizId) {
        List<Report> reports = reportRepo.findByQuizIdAndUserId(quizId, userId);
        return !reports.isEmpty();
    }

    private boolean isValidStatus(String status) {
        return status.equals("PENDING") || status.equals("RESOLVED") || status.equals("REJECTED");
    }
}