package com.nhom7.quiz.quizapp.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.nhom7.quiz.quizapp.model.Answer;
import com.nhom7.quiz.quizapp.model.Category;
import com.nhom7.quiz.quizapp.model.Image;
import com.nhom7.quiz.quizapp.model.Result;
import com.nhom7.quiz.quizapp.model.Question;
import com.nhom7.quiz.quizapp.model.Quiz;
import com.nhom7.quiz.quizapp.model.User;
import com.nhom7.quiz.quizapp.model.dto.AnswerImportDto;
import com.nhom7.quiz.quizapp.model.dto.QuestionImportDto;
import com.nhom7.quiz.quizapp.model.dto.QuizImportDto;
import com.nhom7.quiz.quizapp.model.dto.QuizDetailDTO;
import com.nhom7.quiz.quizapp.repository.CategoryRepo;
import com.nhom7.quiz.quizapp.repository.ImageRepo;
import com.nhom7.quiz.quizapp.repository.QuestionRepo;
import com.nhom7.quiz.quizapp.repository.QuizRepo;
import com.nhom7.quiz.quizapp.repository.ResultRepo;
import com.nhom7.quiz.quizapp.service.userService.LoginService;

@Service
public class QuizService {

	@Autowired
	private QuizRepo quizRepo;

	@Autowired
	private ImageRepo imageRepo;

	@Autowired
	private LoginService loginService;

	@Autowired
	private CategoryRepo categoryRepo;

	@Autowired
	private ExcelImportService excelImportService;

	@Autowired
	private QuestionService questionService;

	@Autowired
	private QuestionRepo questionRepo;

	@Autowired
	private AnswerService answerService;

	@Autowired
	private ResultService resultService;

	@Autowired
	private ResultRepo resultRepo;

	public Quiz findById(Long id) {
		return quizRepo.findById(id).orElse(null);
	}

	// OWNERSHIP VALIDATION METHOD
	public boolean isOwner(Long quizId, String username) {
		System.out.println("=== DEBUG isOwner ===");
		System.out.println("QuizId: " + quizId);
		System.out.println("Username: " + username);

		if (quizId == null || username == null || username.isBlank()) {
			System.out.println("Null check failed - returning false");
			return false;
		}

		// S·ª≠ d·ª•ng method m·ªõi ƒë·ªÉ ki·ªÉm tra k·ªÉ c·∫£ quiz ƒë√£ soft delete
		boolean result = quizRepo.existsByIdAndUser_UsernameIncludeDeleted(quizId, username);
		System.out.println("Database check result: " + result);

		// Debug th√™m: ki·ªÉm tra quiz c√≥ t·ªìn t·∫°i kh√¥ng v√† thu·ªôc v·ªÅ user n√†o
		Optional<Quiz> quizOpt = quizRepo.findById(quizId);
		if (quizOpt.isPresent()) {
			Quiz quiz = quizOpt.get();
			System.out.println(
					"Quiz exists - Owner: " + (quiz.getUser() != null ? quiz.getUser().getUsername() : "NULL"));
			System.out.println("Comparing with: " + username);
		} else {
			System.out.println("Quiz not found in database!");
		}

		System.out.println("=== END DEBUG isOwner ===");

		return result;
	}

	// L·∫•y t·∫•t c·∫£ quiz
	public List<Quiz> getAllQuiz() {
		return quizRepo.findAll();
	}

	// T·∫°o quiz m·ªõi
	public Quiz createQuiz(Quiz quiz) {
		try {
			// DEBUG: In ra th√¥ng tin quiz tr∆∞·ªõc khi l∆∞u
			System.out.println("Creating quiz - Title: " + quiz.getTitle());
			System.out.println("Quiz User: " + (quiz.getUser() != null ? quiz.getUser().getId() : "NULL"));
			System.out
					.println("Quiz Category: " + (quiz.getCategory() != null ? quiz.getCategory().getId() : "NULL"));
			System.out.println("Quiz IsPublic: " + quiz.isPublic());

			quiz.setCreatedAt(LocalDateTime.now());

			// L∆ØU QUIZ TR∆Ø·ªöC
			Quiz savedQuiz = quizRepo.save(quiz);

			// T·∫†O CODE SAU KHI ƒê√É C√ì ID
			String quizCode = generateQuizCode(savedQuiz.getId());
			savedQuiz.setQuizCode(quizCode);
			savedQuiz.setCodeCreatedAt(LocalDateTime.now());

			// L∆ØU L·∫†I V·ªöI CODE
			Quiz finalQuiz = quizRepo.save(savedQuiz);

			// DEBUG: In ra quiz sau khi l∆∞u
			System.out.println("Quiz created successfully with ID: " + finalQuiz.getId());
			System.out.println("Quiz Code: " + finalQuiz.getQuizCode());

			return finalQuiz;
		} catch (Exception e) {
			System.err.println("Error creating quiz: " + e.getMessage());
			e.printStackTrace();
			throw e;
		}
	}

	// TH√äM METHOD T·∫†O CODE QUIZ
	public String generateQuizCode(Long quizId) {
		// T·∫°o code 6 k√Ω t·ª±: 3 ch·ªØ c√°i + 3 s·ªë
		String letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String numbers = "0123456789";

		StringBuilder code = new StringBuilder();
		Random random = new Random();

		// T·∫°o 3 ch·ªØ c√°i ng·∫´u nhi√™n
		for (int i = 0; i < 3; i++) {
			code.append(letters.charAt(random.nextInt(letters.length())));
		}

		// T·∫°o 3 s·ªë ng·∫´u nhi√™n
		for (int i = 0; i < 3; i++) {
			code.append(numbers.charAt(random.nextInt(numbers.length())));
		}

		String generatedCode = code.toString();

		// Ki·ªÉm tra xem code ƒë√£ t·ªìn t·∫°i ch∆∞a
		if (quizRepo.existsByQuizCode(generatedCode)) {
			// N·∫øu ƒë√£ t·ªìn t·∫°i, t·∫°o l·∫°i
			return generateQuizCode(quizId);
		}

		return generatedCode;
	}

	// TH√äM METHOD T√åM QUIZ THEO CODE
	public Optional<Quiz> findByQuizCode(String quizCode) {
		return quizRepo.findByQuizCode(quizCode.toUpperCase());
	}

	// L·∫•y quiz theo ID
	public Optional<Quiz> getQuizById(Long id) {
		return quizRepo.findById(id);
	}

	// C·∫≠p nh·∫≠t quiz
	@Transactional
	public Optional<Quiz> updateQuiz(Long id, Quiz updatedQuiz) {
		System.out.println("[QuizService] Starting updateQuiz for ID: " + id);
		System.out.println("[QuizService] Updated quiz isPublic: " + updatedQuiz.isPublic());

		return quizRepo.findById(id).map(quiz -> {
			System.out.println("[QuizService] Found existing quiz - Current isPublic: " + quiz.isPublic());

			quiz.setTitle(updatedQuiz.getTitle());
			quiz.setPublic(updatedQuiz.isPublic());
			quiz.setCategory(updatedQuiz.getCategory());

			System.out.println("[QuizService] After setting - Quiz isPublic: " + quiz.isPublic());

			// C·∫¨P NH·∫¨T IMAGE N·∫æU C√ì
			if (updatedQuiz.getImage() != null && !updatedQuiz.getImage().trim().isEmpty()) {
				// T√¨m image record hi·ªán t·∫°i
				Image existingImage = imageRepo.findByQuizId(id);

				if (existingImage != null) {
					// C·∫≠p nh·∫≠t image hi·ªán t·∫°i
					existingImage.setUrl(updatedQuiz.getImage());
					imageRepo.save(existingImage);
				} else {
					// T·∫°o image record m·ªõi
					Image newImage = new Image();
					newImage.setUrl(updatedQuiz.getImage());
					newImage.setQuiz(quiz);
					imageRepo.save(newImage);
				}
			}

			// C·∫¨P NH·∫¨T QUIZ.IMAGE FIELD
			quiz.setImage(updatedQuiz.getImage());

			Quiz savedQuiz = quizRepo.save(quiz);
			System.out.println("üîÑ [QuizService] After save - Saved quiz isPublic: " + savedQuiz.isPublic());

			return savedQuiz;
		});
	}

	// L·∫•y danh s√°ch quiz theo userId c√≥ ph√¢n trang
	public Page<Quiz> getQuizzesByUserPaginated(Long userId, int page, int size) {
		Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
		Page<Quiz> pageRes = quizRepo.findByUserIdAndDeletedFalse(userId, pageable);
		// N·∫°p playCount t·∫°m th·ªùi d·ª±a tr√™n Result
		for (Quiz q : pageRes.getContent()) {
			try {
				long plays = resultRepo.countByQuiz_Id(q.getId());
				q.setPlayCount(plays);
			} catch (Exception ignore) {
			}
		}
		return pageRes;
	}

	public Page<Quiz> getPublicQuizzes(Boolean isPublic, int page, int size) {
		Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "createdAt"));
		Page<Quiz> pageRes = quizRepo.findByIsPublicAndDeletedFalse(isPublic, pageable);
		return pageRes;
	}

	// TH√äM METHOD L·∫§Y QUIZ PUBLIC THEO CATEGORY
	public Page<Quiz> getPublicQuizzesByCategory(Long categoryId, int page, int size) {
		Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "createdAt"));
		return quizRepo.findPublicByCategory(categoryId, pageable);
	}

	// TH√äM C√ÅC METHOD CHO SOFT DELETE
	// L·∫•y t·∫•t c·∫£ quiz c·ªßa user (k·ªÉ c·∫£ ƒë√£ x√≥a) - cho admin
	public Page<Quiz> getAllQuizzesByUserPaginated(Long userId, int page, int size) {
		Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
		return quizRepo.findByUserId(userId, pageable);
	}

	// L·∫•y quiz ƒë√£ b·ªã x√≥a m·ªÅm c·ªßa user
	public Page<Quiz> getDeletedQuizzesByUserPaginated(Long userId, int page, int size) {
		Pageable pageable = PageRequest.of(page, size, Sort.by("deletedAt").descending());
		return quizRepo.findByUserIdAndDeletedTrue(userId, pageable);
	}

	// Soft delete quiz
	@Transactional
	public boolean softDeleteQuiz(Long id, Long deletedByUserId) {
		System.out.println(" Checking if quiz exists: " + id);
		if (quizRepo.existsByIdAndDeletedFalse(id)) {
			System.out.println("Quiz exists, proceeding with soft deletion");
			try {
				Optional<Quiz> quizOpt = quizRepo.findById(id);
				if (quizOpt.isPresent()) {
					Quiz quiz = quizOpt.get();
					quiz.setDeleted(true); // S·ª¨A: S·ª≠ d·ª•ng Boolean.TRUE
					quiz.setDeletedAt(LocalDateTime.now());

					// Set user who deleted (n·∫øu c·∫ßn)
					if (deletedByUserId != null) {
						User deletedBy = loginService.findById(deletedByUserId);
						if (deletedBy != null) {
							quiz.setDeletedBy(deletedBy);
						}
					}

					quizRepo.save(quiz);
					System.out.println("Quiz soft deleted successfully");
					return true;
				}
				return false;
			} catch (Exception e) {
				System.err.println("Error soft deleting quiz: " + e.getMessage());
				e.printStackTrace();
				return false;
			}
		} else {
			System.out.println("Quiz not found or already deleted: " + id);
			return false;
		}
	}

	// Restore quiz (kh√¥i ph·ª•c quiz ƒë√£ x√≥a m·ªÅm)
	@Transactional
	public boolean restoreQuiz(Long id) {
		System.out.println(" Attempting to restore quiz: " + id);
		if (quizRepo.existsById(id)) {
			try {
				quizRepo.restoreQuiz(id);
				System.out.println("Quiz restored successfully");
				return true;
			} catch (Exception e) {
				System.err.println("Error restoring quiz: " + e.getMessage());
				e.printStackTrace();
				return false;
			}
		} else {
			System.out.println("Quiz not found: " + id);
			return false;
		}
	}

	// Hard delete quiz (x√≥a ho√†n to√†n)
	@Transactional
	public boolean hardDeleteQuiz(Long id) {
		System.out.println(" Checking if quiz exists: " + id);

		// Ki·ªÉm tra quiz c√≥ t·ªìn t·∫°i kh√¥ng (k·ªÉ c·∫£ soft deleted)
		Optional<Quiz> quizOpt = quizRepo.findById(id);
		if (quizOpt.isPresent()) {
			Quiz quiz = quizOpt.get();
			System.out.println("Quiz found - ID: " + quiz.getId() + ", Title: " + quiz.getTitle() + ", Deleted: "
					+ quiz.isDeleted());
			System.out.println("Quiz exists, proceeding with hard deletion");
			try {
				// ƒê∆°n gi·∫£n h√≥a - ch·ªâ x√≥a quiz tr·ª±c ti·∫øp
				System.out.println("Deleting quiz directly: " + id);
				quizRepo.deleteById(id);
				System.out.println("Quiz hard deleted successfully");
				return true;
			} catch (Exception e) {
				System.err.println("Error hard deleting quiz: " + e.getMessage());
				e.printStackTrace();
				return false;
			}
		} else {
			System.out.println("Quiz not found: " + id);
			return false;
		}
	}

	// GI·ªÆ L·∫†I METHOD C≈® ƒê·ªÇ T∆Ø∆†NG TH√çCH NG∆Ø·ª¢C
	@Transactional
	public boolean deleteQuiz(Long id) {
		// M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng soft delete
		return softDeleteQuiz(id, null);
	}

	public Image uploadImageForQuiz(Quiz quiz, MultipartFile file) throws IOException {
		// T·∫°o folder n·∫øu ch∆∞a c√≥
		String uploadDir = "uploads/images";
		Files.createDirectories(Paths.get(uploadDir));

		// ƒê·∫∑t t√™n file
		String originalFilename = file.getOriginalFilename();
		String extension = (originalFilename != null && originalFilename.contains("."))
				? originalFilename.substring(originalFilename.lastIndexOf('.'))
				: ".jpg";
		String filename = UUID.randomUUID().toString() + extension;

		// L∆∞u file
		Path filePath = Paths.get(uploadDir, filename);
		Files.write(filePath, file.getBytes());

		// L∆∞u th√¥ng tin v√†o DB
		Image image = new Image();
		image.setUrl(filename);
		image.setQuiz(quiz);

		return imageRepo.save(image);
	}

	// PH∆Ø∆†NG TH·ª®C IMPORT T·ª™ EXCEL - ƒê√É S·ª¨A HO√ÄN CH·ªàNH
	public Quiz createQuizFromImport(QuizImportDto quizData, String username, boolean isPublic) {
		// Validate d·ªØ li·ªáu
		excelImportService.validateQuizData(quizData);

		// T√¨m user
		User user = loginService.findByUsername(username);
		if (user == null) {
			throw new RuntimeException("Kh√¥ng t√¨m th·∫•y user");
		}

		// S·ª¨A: T√¨m category qua Repository
		Category category = categoryRepo.findById(quizData.getCategoryId()).orElse(null);
		if (category == null) {
			throw new RuntimeException("Kh√¥ng t√¨m th·∫•y category");
		}

		// T·∫°o quiz
		Quiz quiz = new Quiz();
		quiz.setTitle(quizData.getTitle());
		quiz.setUser(user);
		quiz.setCategory(category);
		quiz.setPublic(isPublic); // S·ª¨ D·ª§NG ISPUBLIC T·ª™ PARAMETER
		quiz.setCreatedAt(LocalDateTime.now());

		Quiz savedQuiz = quizRepo.save(quiz);

		// T·∫†O CODE CHO QUIZ IMPORT
		String quizCode = generateQuizCode(savedQuiz.getId());
		savedQuiz.setQuizCode(quizCode);
		savedQuiz.setCodeCreatedAt(LocalDateTime.now());
		Quiz finalQuiz = quizRepo.save(savedQuiz);

		// T·∫°o questions v√† answers
		for (QuestionImportDto questionDto : quizData.getQuestions()) {
			Question question = new Question();
			question.setContent(questionDto.getContent());
			// B·ªè d√πng ƒëi·ªÉm c√¢u h·ªèi: kh√¥ng set point t·ª´ d·ªØ li·ªáu import
			question.setTimeLimit(questionDto.getTimeLimit()); // S·ª¨ D·ª§NG TIMELIMIT T·ª™ EXCEL
			question.setQuiz(savedQuiz); // S·ª¨A: setQuiz thay v√¨ setQuizId

			Question savedQuestion = questionService.createQuestion(question); // S·ª¨A: createQuestion thay v√¨
																				// saveQuestion
			// T·∫°o answers
			for (AnswerImportDto answerDto : questionDto.getAnswers()) {
				Answer answer = new Answer();
				answer.setContent(answerDto.getContent());
				answer.setCorrect(answerDto.isCorrect());
				answer.setQuestion(savedQuestion); // S·ª¨A: setQuestion thay v√¨ setQuestionId

				// S·ª¨A: T·∫°o Answer th√¥ng qua createMultipleAnswers ho·∫∑c tr·ª±c ti·∫øp save
				answerService.createMultipleAnswers(List.of(answer));
			}
		}

		return finalQuiz;
	}

	// PH∆Ø∆†NG TH·ª®C IMPORT QUIZ T·ª™ FILE EXCEL
	public Quiz importQuizFromExcel(MultipartFile file, String title, String description, Long categoryId,
			String username, boolean isPublic) {
		try {
			// Parse Excel file with all parameters
			QuizImportDto quizData = excelImportService.parseExcelFile(file, title, description, categoryId);

			// Create quiz with isPublic parameter
			return createQuizFromImport(quizData, username, isPublic);

		} catch (Exception e) {
			throw new RuntimeException("L·ªói khi import file Excel: " + e.getMessage(), e);
		}
	}

	// PH∆Ø∆†NG TH·ª®C L·∫§Y CHI TI·∫æT QUIZ V·ªöI TH·ªêNG K√ä
	public Optional<QuizDetailDTO> getQuizDetail(Long id) {
		return quizRepo.findById(id).map(quiz -> {
			// L·∫•y th√¥ng tin c∆° b·∫£n
			QuizDetailDTO detail = new QuizDetailDTO();
			detail.setId(quiz.getId());
			detail.setTitle(quiz.getTitle());
			detail.setImage(quiz.getImage());
			detail.setPublic(quiz.isPublic());
			detail.setCreatedAt(quiz.getCreatedAt());

			// Th√¥ng tin ng∆∞·ªùi t·∫°o
			if (quiz.getUser() != null) {
				System.out.println(" Setting creator info:");
				System.out.println("  - User ID: " + quiz.getUser().getId());
				System.out.println("  - Username: " + quiz.getUser().getUsername());
				System.out.println("  - Full Name: " + quiz.getUser().getFullName());

				detail.setCreatorName(quiz.getUser().getFullName() != null ? quiz.getUser().getFullName()
						: quiz.getUser().getUsername());
				detail.setCreatorAvatar(quiz.getUser().getAvatarUrl());
				detail.setCreatorId(quiz.getUser().getId());

				System.out.println("  - Set creatorId: " + detail.getCreatorId());
			} else {
				System.out.println(" Quiz user is null!");
			}

			// Th√¥ng tin danh m·ª•c
			if (quiz.getCategory() != null) {
				detail.setCategoryName(quiz.getCategory().getName());
			}

			// Th√¥ng tin tags
			if (quiz.getQuizTags() != null && !quiz.getQuizTags().isEmpty()) {
				List<String> tagNames = quiz.getQuizTags().stream()
						.map(qt -> qt.getTag().getName())
						.toList();
				detail.setTags(tagNames);
			}

			// Th·ªëng k√™ c√¢u h·ªèi
			int totalQuestions = quiz.getQuestions().size();
			// B·ªè th·ªëng k√™ t·ªïng ƒëi·ªÉm c√¢u h·ªèi
			int totalPoints = 0;
			int totalTime = quiz.getQuestions().stream()
					.mapToInt(q -> q.getTimeLimit())
					.sum();

			detail.setTotalQuestions(totalQuestions);
			detail.setTotalPoints(totalPoints); // gi·ªØ field cho t∆∞∆°ng th√≠ch UI, gi√° tr·ªã 0
			detail.setTotalTime(totalTime);

			// Th·ªëng k√™ t·ª´ k·∫øt qu·∫£/attempts n·∫øu ƒë√£ c√≥ d·ªØ li·ªáu
			try {
				// total plays = t·ªïng s·ªë Result c·ªßa quiz
				List<Result> quizResults = resultService.getResultsByQuizId(quiz.getId());
				int totalPlays = (quizResults != null) ? quizResults.size() : 0;
				detail.setTotalPlays(totalPlays);

				if (totalPlays > 0 && quizResults != null) {
					double avgScore = quizResults.stream()
							.mapToInt(r -> r.getScore())
							.average().orElse(0.0);
					detail.setAverageScore(Math.round(avgScore * 10.0) / 10.0);

					long unique = quizResults.stream()
							.map(r -> r.getUser().getId())
							.distinct().count();
					detail.setUniqueParticipants((int) unique);

					// completionRate: % b√†i c√≥ ƒëi·ªÉm > 0
					long completed = quizResults.stream().filter(r -> r.getScore() > 0)
							.count();
					detail.setCompletionRate(totalPlays > 0 ? (completed * 100.0 / totalPlays) : 0.0);

					// average time (n·∫øu c√≥ timeTaken), m·∫∑c ƒë·ªãnh 0
					double avgTime = quizResults.stream()
							.filter(r -> r.getTimeTaken() != null)
							.mapToInt(r -> r.getTimeTaken())
							.average().orElse(0.0);
					detail.setAverageTime((int) Math.round(avgTime));
				} else {
					detail.setAverageScore(0.0);
					detail.setUniqueParticipants(0);
					detail.setCompletionRate(0.0);
					detail.setAverageTime(0);
				}
			} catch (Exception ignore) {
				detail.setTotalPlays(0);
				detail.setAverageScore(0.0);
				detail.setUniqueParticipants(0);
				detail.setCompletionRate(0.0);
				detail.setAverageTime(0);
			}

			return detail;
		});
	}
}