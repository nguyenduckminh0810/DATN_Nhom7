package com.nhom7.quiz.quizapp.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.nhom7.quiz.quizapp.model.Answer;
import com.nhom7.quiz.quizapp.model.Category;
import com.nhom7.quiz.quizapp.model.Image;
import com.nhom7.quiz.quizapp.model.Question;
import com.nhom7.quiz.quizapp.model.Quiz;
import com.nhom7.quiz.quizapp.model.User;
import com.nhom7.quiz.quizapp.model.dto.AnswerImportDto;
import com.nhom7.quiz.quizapp.model.dto.QuestionImportDto;
import com.nhom7.quiz.quizapp.model.dto.QuizImportDto;
import com.nhom7.quiz.quizapp.model.dto.QuizDetailDTO;
import com.nhom7.quiz.quizapp.model.dto.QuizAttemptSummaryDTO;
import com.nhom7.quiz.quizapp.repository.CategoryRepo; // ‚úÖ TH√äM IMPORT
import com.nhom7.quiz.quizapp.repository.ImageRepo;
import com.nhom7.quiz.quizapp.repository.QuizRepo;
import com.nhom7.quiz.quizapp.service.userService.LoginService;

@Service
public class QuizService {

	@Autowired
	private QuizRepo quizRepo;

	@Autowired
	private ImageRepo imageRepo;

	// ‚úÖ TH√äM C√ÅC DEPENDENCIES C·∫¶N THI·∫æT
	@Autowired
	private LoginService loginService;

	@Autowired
	private CategoryRepo categoryRepo; // ‚úÖ S·ª¨A: D√πng Repository thay v√¨ Service

	@Autowired
	private ExcelImportService excelImportService;

	@Autowired
	private QuestionService questionService;

	@Autowired
	private AnswerService answerService;
	
	@Autowired
	private ResultService resultService;

	// ‚úÖ OWNERSHIP VALIDATION METHOD
	public boolean isOwner(Long quizId, String username) {
		try {
			Optional<Quiz> quizOpt = quizRepo.findById(quizId);
			if (quizOpt.isPresent()) {
				Quiz quiz = quizOpt.get();
				User user = loginService.findByUsername(username);
				return user != null && quiz.getUser() != null && 
					   user.getId().equals(quiz.getUser().getId());
			}
			return false;
		} catch (Exception e) {
			System.err.println("‚ùå Error checking ownership: " + e.getMessage());
			return false;
		}
	}

	// L·∫•y t·∫•t c·∫£ quiz
	public List<Quiz> getAllQuiz() {
		return quizRepo.findAll();
	}

	// T·∫°o quiz m·ªõi
	public Quiz createQuiz(Quiz quiz) {
		try {
			// ‚úÖ DEBUG: In ra th√¥ng tin quiz tr∆∞·ªõc khi l∆∞u
			System.out.println("üìù Creating quiz - Title: " + quiz.getTitle());
			System.out.println("üìù Quiz User: " + (quiz.getUser() != null ? quiz.getUser().getId() : "NULL"));
			System.out
					.println("üìù Quiz Category: " + (quiz.getCategory() != null ? quiz.getCategory().getId() : "NULL"));
			System.out.println("üìù Quiz IsPublic: " + quiz.isPublic());

			quiz.setCreatedAt(LocalDateTime.now());
			
			// ‚úÖ L∆ØU QUIZ TR∆Ø·ªöC
			Quiz savedQuiz = quizRepo.save(quiz);
			
			// ‚úÖ T·∫†O CODE SAU KHI ƒê√É C√ì ID
			String quizCode = generateQuizCode(savedQuiz.getId());
			savedQuiz.setQuizCode(quizCode);
			savedQuiz.setCodeCreatedAt(LocalDateTime.now());
			
			// ‚úÖ L∆ØU L·∫†I V·ªöI CODE
			Quiz finalQuiz = quizRepo.save(savedQuiz);

			// ‚úÖ DEBUG: In ra quiz sau khi l∆∞u
			System.out.println("üìù Quiz created successfully with ID: " + finalQuiz.getId());
			System.out.println("üìù Quiz Code: " + finalQuiz.getQuizCode());

			return finalQuiz;
		} catch (Exception e) {
			System.err.println("‚ùå Error creating quiz: " + e.getMessage());
			e.printStackTrace();
			throw e;
		}
	}

	// ‚úÖ TH√äM METHOD T·∫†O CODE QUIZ
	public String generateQuizCode(Long quizId) {
		// T·∫°o code 6 k√Ω t·ª±: 3 ch·ªØ c√°i + 3 s·ªë
		String letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String numbers = "0123456789";
		
		StringBuilder code = new StringBuilder();
		Random random = new Random();
		
		// T·∫°o 3 ch·ªØ c√°i ng·∫´u nhi√™n
		for (int i = 0; i < 3; i++) {
			code.append(letters.charAt(random.nextInt(letters.length())));
		}
		
		// T·∫°o 3 s·ªë ng·∫´u nhi√™n
		for (int i = 0; i < 3; i++) {
			code.append(numbers.charAt(random.nextInt(numbers.length())));
		}
		
		String generatedCode = code.toString();
		
		// Ki·ªÉm tra xem code ƒë√£ t·ªìn t·∫°i ch∆∞a
		if (quizRepo.existsByQuizCode(generatedCode)) {
			// N·∫øu ƒë√£ t·ªìn t·∫°i, t·∫°o l·∫°i
			return generateQuizCode(quizId);
		}
		
		return generatedCode;
	}

	// ‚úÖ TH√äM METHOD T√åM QUIZ THEO CODE
	public Optional<Quiz> findByQuizCode(String quizCode) {
		return quizRepo.findByQuizCode(quizCode.toUpperCase());
	}

	// L·∫•y quiz theo ID
	public Optional<Quiz> getQuizById(Long id) {
		return quizRepo.findById(id);
	}

	// C·∫≠p nh·∫≠t quiz
	public Optional<Quiz> updateQuiz(Long id, Quiz updatedQuiz) {
		return quizRepo.findById(id).map(quiz -> {
			quiz.setTitle(updatedQuiz.getTitle());
			quiz.setPublic(updatedQuiz.isPublic());
			quiz.setCategory(updatedQuiz.getCategory());

			// ‚úÖ C·∫¨P NH·∫¨T IMAGE N·∫æU C√ì
			if (updatedQuiz.getImage() != null && !updatedQuiz.getImage().trim().isEmpty()) {
				// T√¨m image record hi·ªán t·∫°i
				Image existingImage = imageRepo.findByQuizId(id);

				if (existingImage != null) {
					// C·∫≠p nh·∫≠t image hi·ªán t·∫°i
					existingImage.setUrl(updatedQuiz.getImage());
					imageRepo.save(existingImage);
				} else {
					// T·∫°o image record m·ªõi
					Image newImage = new Image();
					newImage.setUrl(updatedQuiz.getImage());
					newImage.setQuiz(quiz);
					imageRepo.save(newImage);
				}
			}

			// ‚úÖ C·∫¨P NH·∫¨T QUIZ.IMAGE FIELD
			quiz.setImage(updatedQuiz.getImage());

			return quizRepo.save(quiz);
		});
	}

	// L·∫•y danh s√°ch quiz theo userId c√≥ ph√¢n trang
	public Page<Quiz> getQuizzesByUserPaginated(Long userId, int page, int size) {
		Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
		return quizRepo.findByUserIdAndDeletedFalse(userId, pageable);
	}

	public Page<Quiz> getPublicQuizzes(Boolean isPublic, int page, int size) {
		Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "createdAt"));
		return quizRepo.findByIsPublicAndDeletedFalse(isPublic, pageable);
	}

	// ‚úÖ TH√äM C√ÅC METHOD CHO SOFT DELETE
	// L·∫•y t·∫•t c·∫£ quiz c·ªßa user (k·ªÉ c·∫£ ƒë√£ x√≥a) - cho admin
	public Page<Quiz> getAllQuizzesByUserPaginated(Long userId, int page, int size) {
		Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
		return quizRepo.findByUserId(userId, pageable);
	}

	// L·∫•y quiz ƒë√£ b·ªã x√≥a m·ªÅm c·ªßa user
	public Page<Quiz> getDeletedQuizzesByUserPaginated(Long userId, int page, int size) {
		Pageable pageable = PageRequest.of(page, size, Sort.by("deletedAt").descending());
		return quizRepo.findByUserIdAndDeletedTrue(userId, pageable);
	}

	// Soft delete quiz
	@Transactional
	public boolean softDeleteQuiz(Long id, Long deletedByUserId) {
		System.out.println("üîç Checking if quiz exists: " + id);
		if (quizRepo.existsByIdAndDeletedFalse(id)) {
			System.out.println("‚úÖ Quiz exists, proceeding with soft deletion");
			try {
				Optional<Quiz> quizOpt = quizRepo.findById(id);
				if (quizOpt.isPresent()) {
					Quiz quiz = quizOpt.get();
					quiz.setDeleted(true); // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng Boolean.TRUE
					quiz.setDeletedAt(LocalDateTime.now());
					
					// Set user who deleted (n·∫øu c·∫ßn)
					if (deletedByUserId != null) {
						User deletedBy = loginService.findById(deletedByUserId);
						if (deletedBy != null) {
							quiz.setDeletedBy(deletedBy);
						}
					}
					
					quizRepo.save(quiz);
					System.out.println("‚úÖ Quiz soft deleted successfully");
					return true;
				}
				return false;
			} catch (Exception e) {
				System.err.println("‚ùå Error soft deleting quiz: " + e.getMessage());
				e.printStackTrace();
				return false;
			}
		} else {
			System.out.println("‚ùå Quiz not found or already deleted: " + id);
			return false;
		}
	}

	// Restore quiz (kh√¥i ph·ª•c quiz ƒë√£ x√≥a m·ªÅm)
	@Transactional
	public boolean restoreQuiz(Long id) {
		System.out.println("üîç Attempting to restore quiz: " + id);
		if (quizRepo.existsById(id)) {
			try {
				quizRepo.restoreQuiz(id);
				System.out.println("‚úÖ Quiz restored successfully");
				return true;
			} catch (Exception e) {
				System.err.println("‚ùå Error restoring quiz: " + e.getMessage());
				e.printStackTrace();
				return false;
			}
		} else {
			System.out.println("‚ùå Quiz not found: " + id);
			return false;
		}
	}

	// Hard delete quiz (x√≥a ho√†n to√†n)
	@Transactional
	public boolean hardDeleteQuiz(Long id) {
		System.out.println("üîç Checking if quiz exists: " + id);
		if (quizRepo.existsById(id)) {
			System.out.println("‚úÖ Quiz exists, proceeding with hard deletion");
			try {
				// 1. X√≥a image tr∆∞·ªõc
				Image image = imageRepo.findByQuizId(id);
				if (image != null) {
					System.out.println("üóëÔ∏è Deleting image: " + image.getUrl());
					imageRepo.delete(image);
				}
				
				// 2. X√≥a results tr∆∞·ªõc (v√¨ results reference ƒë·∫øn quiz)
				System.out.println("üóëÔ∏è Deleting results for quiz: " + id);
				resultService.deleteResultsByQuizId(id);
				
				// 3. L·∫•y questions c·ªßa quiz
				List<Question> questions = questionService.getQuestionsByQuizId(id);
				System.out.println("üóëÔ∏è Found " + (questions != null ? questions.size() : 0) + " questions to delete");
				if (questions != null && !questions.isEmpty()) {
					// 4. X√≥a answers tr∆∞·ªõc (v√¨ answers reference ƒë·∫øn questions)
					for (Question question : questions) {
						System.out.println("üóëÔ∏è Deleting answers for question: " + question.getId());
						answerService.deleteByQuestionId(question.getId());
					}
					
					// 5. X√≥a questions
					for (Question question : questions) {
						System.out.println("üóëÔ∏è Deleting question: " + question.getId());
						questionService.deleteQuestion(question.getId());
					}
				}
				
				// 6. Cu·ªëi c√πng x√≥a quiz
				System.out.println("üóëÔ∏è Deleting quiz: " + id);
				quizRepo.deleteById(id);
				System.out.println("‚úÖ Quiz hard deleted successfully");
				return true;
			} catch (Exception e) {
				System.err.println("‚ùå Error hard deleting quiz: " + e.getMessage());
				e.printStackTrace();
				return false;
			}
		} else {
			System.out.println("‚ùå Quiz not found: " + id);
			return false;
		}
	}

	// ‚úÖ GI·ªÆ L·∫†I METHOD C≈® ƒê·ªÇ T∆Ø∆†NG TH√çCH NG∆Ø·ª¢C
	@Transactional
	public boolean deleteQuiz(Long id) {
		// M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng soft delete
		return softDeleteQuiz(id, null);
	}

	public Image uploadImageForQuiz(Quiz quiz, MultipartFile file) throws IOException {
		// T·∫°o folder n·∫øu ch∆∞a c√≥
		String uploadDir = "uploads/images";
		Files.createDirectories(Paths.get(uploadDir));

		// ƒê·∫∑t t√™n file
		String originalFilename = file.getOriginalFilename();
		String extension = originalFilename.substring(originalFilename.lastIndexOf('.'));
		String filename = UUID.randomUUID().toString() + extension;

		// L∆∞u file
		Path filePath = Paths.get(uploadDir, filename);
		Files.write(filePath, file.getBytes());

		// L∆∞u th√¥ng tin v√†o DB
		Image image = new Image();
		image.setUrl(filename);
		image.setQuiz(quiz);

		return imageRepo.save(image);
	}

	// ‚úÖ PH∆Ø∆†NG TH·ª®C IMPORT T·ª™ EXCEL - ƒê√É S·ª¨A HO√ÄN CH·ªàNH
	public Quiz createQuizFromImport(QuizImportDto quizData, String username, boolean isPublic) {
		// Validate d·ªØ li·ªáu
		excelImportService.validateQuizData(quizData);

		// T√¨m user
		User user = loginService.findByUsername(username);
		if (user == null) {
			throw new RuntimeException("Kh√¥ng t√¨m th·∫•y user");
		}

		// ‚úÖ S·ª¨A: T√¨m category qua Repository
		Category category = categoryRepo.findById(quizData.getCategoryId()).orElse(null);
		if (category == null) {
			throw new RuntimeException("Kh√¥ng t√¨m th·∫•y category");
		}

		// T·∫°o quiz
		Quiz quiz = new Quiz();
		quiz.setTitle(quizData.getTitle());
		quiz.setUser(user);
		quiz.setCategory(category);
		quiz.setPublic(isPublic); // ‚úÖ S·ª¨ D·ª§NG ISPUBLIC T·ª™ PARAMETER
		quiz.setCreatedAt(LocalDateTime.now());

		Quiz savedQuiz = quizRepo.save(quiz);

		// ‚úÖ T·∫†O CODE CHO QUIZ IMPORT
		String quizCode = generateQuizCode(savedQuiz.getId());
		savedQuiz.setQuizCode(quizCode);
		savedQuiz.setCodeCreatedAt(LocalDateTime.now());
		Quiz finalQuiz = quizRepo.save(savedQuiz);

		// T·∫°o questions v√† answers
		for (QuestionImportDto questionDto : quizData.getQuestions()) {
			Question question = new Question();
			question.setContent(questionDto.getContent());
			question.setPoint(questionDto.getPoint());
			question.setTimeLimit(questionDto.getTimeLimit()); // ‚úÖ S·ª¨ D·ª§NG TIMELIMIT T·ª™ EXCEL
			question.setQuiz(savedQuiz); // ‚úÖ S·ª¨A: setQuiz thay v√¨ setQuizId

			Question savedQuestion = questionService.createQuestion(question); // ‚úÖ S·ª¨A: createQuestion thay v√¨
																				// saveQuestion

			// T·∫°o answers
			for (AnswerImportDto answerDto : questionDto.getAnswers()) {
				Answer answer = new Answer();
				answer.setContent(answerDto.getContent());
				answer.setCorrect(answerDto.isCorrect());
				answer.setQuestion(savedQuestion); // ‚úÖ S·ª¨A: setQuestion thay v√¨ setQuestionId

				// ‚úÖ S·ª¨A: T·∫°o Answer th√¥ng qua createMultipleAnswers ho·∫∑c tr·ª±c ti·∫øp save
				answerService.createMultipleAnswers(List.of(answer));
			}
		}

		return finalQuiz;
	}

	// ‚úÖ PH∆Ø∆†NG TH·ª®C IMPORT QUIZ T·ª™ FILE EXCEL
	public Quiz importQuizFromExcel(MultipartFile file, String title, String description, Long categoryId,
			String username, boolean isPublic) {
		try {
			// Parse Excel file with all parameters
			QuizImportDto quizData = excelImportService.parseExcelFile(file, title, description, categoryId);

			// Create quiz with isPublic parameter
			return createQuizFromImport(quizData, username, isPublic);

		} catch (Exception e) {
			throw new RuntimeException("L·ªói khi import file Excel: " + e.getMessage(), e);
		}
	}

	// ‚úÖ PH∆Ø∆†NG TH·ª®C L·∫§Y CHI TI·∫æT QUIZ V·ªöI TH·ªêNG K√ä
	public Optional<QuizDetailDTO> getQuizDetail(Long id) {
		return quizRepo.findById(id).map(quiz -> {
			// L·∫•y th√¥ng tin c∆° b·∫£n
			QuizDetailDTO detail = new QuizDetailDTO();
			detail.setId(quiz.getId());
			detail.setTitle(quiz.getTitle());
			detail.setImage(quiz.getImage());
			detail.setPublic(quiz.isPublic());
			detail.setCreatedAt(quiz.getCreatedAt());

			// Th√¥ng tin ng∆∞·ªùi t·∫°o
			if (quiz.getUser() != null) {
				System.out.println("üîç Setting creator info:");
				System.out.println("  - User ID: " + quiz.getUser().getId());
				System.out.println("  - Username: " + quiz.getUser().getUsername());
				System.out.println("  - Full Name: " + quiz.getUser().getFullName());

				detail.setCreatorName(quiz.getUser().getFullName() != null ? quiz.getUser().getFullName()
						: quiz.getUser().getUsername());
				detail.setCreatorAvatar(quiz.getUser().getAvatarUrl());
				detail.setCreatorId(quiz.getUser().getId());

				System.out.println("  - Set creatorId: " + detail.getCreatorId());
			} else {
				System.out.println("‚ùå Quiz user is null!");
			}

			// Th√¥ng tin danh m·ª•c
			if (quiz.getCategory() != null) {
				detail.setCategoryName(quiz.getCategory().getName());
			}

			// Th√¥ng tin tags
			if (quiz.getQuizTags() != null && !quiz.getQuizTags().isEmpty()) {
				List<String> tagNames = quiz.getQuizTags().stream()
						.map(qt -> qt.getTag().getName())
						.toList();
				detail.setTags(tagNames);
			}

			// Th·ªëng k√™ c√¢u h·ªèi
			int totalQuestions = quiz.getQuestions().size();
			int totalPoints = quiz.getQuestions().stream()
					.mapToInt(q -> q.getPoint())
					.sum();
			int totalTime = quiz.getQuestions().stream()
					.mapToInt(q -> q.getTimeLimit())
					.sum();

			detail.setTotalQuestions(totalQuestions);
			detail.setTotalPoints(totalPoints);
			detail.setTotalTime(totalTime);

			// TODO: Th√™m th·ªëng k√™ t·ª´ QuizAttempt khi c√≥ d·ªØ li·ªáu
			detail.setTotalPlays(0);
			detail.setAverageScore(0.0);
			detail.setUniqueParticipants(0);
			detail.setCompletionRate(0.0);
			detail.setAverageTime(0);

			return detail;
		});
	}
}